<%= erb :_progress_nav, locals: { steps: steps } %>
<% if defined? full_flash %>
  <div class="max-w-lg mx-auto text-center mt-6 px-6 py-16 border-2 border-dashed border-gray-300 rounded-lg bg-white">
    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
    </svg>
    <h3 class="mt-4 text-lg font-semibold text-gray-900"><%= full_flash[:title] %></h3>
    <p class="mt-2 text-sm text-gray-600"><%= full_flash[:message] %></p>
    <% if full_flash[:action_text] && full_flash[:action_url] %>
      <div class="mt-6">
        <a href="<%= full_flash[:action_url] %>" target="_blank" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <%= full_flash[:action_text] %>
        </a>
      </div>
    <% end %>
  </div>
<% else %>
  <div class="min-h-full flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <% if @workspace %>
      <div class="sm:mx-auto sm:w-full sm:max-w-4xl">
        <div class="mb-6">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold">Migrate Points for <%= @workspace["displayName"] %></h2>
            <div class="flex gap-4">
              <a href="/clear-cache" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Refresh
              </a>
            </div>
          </div>
          <div class="rounded-md bg-blue-50 p-4">
            <div class="flex">
              <div class="shrink-0">
                <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-7-4a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM9 9a.75.75 0 0 0 0 1.5h.253a.25.25 0 0 1 .244.304l-.459 2.066A1.75 1.75 0 0 0 10.747 15H11a.75.75 0 0 0 0-1.5h-.253a.25.25 0 0 1-.244-.304l.459-2.066A1.75 1.75 0 0 0 9.253 9H9Z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3 flex-1 md:flex md:justify-between">
                <p class="text-sm text-blue-700">Selected Issues will replace the <strong>Points</strong> value in your GitHub Project.</p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex justify-between items-center mb-4">
          <div class="flex gap-4 text-sm text-gray-600">
            <a href="<%= session[:workspace_url] %>" target="_blank" class="hover:text-gray-900 flex items-center gap-1">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
              </svg>
              ZenHub Workspace
            </a>
            <a href="<%= session[:github_url] %>" target="_blank" class="hover:text-gray-900 flex items-center gap-1">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
              </svg>
              GitHub Project
            </a>
          </div>
        </div>
        <div class="flex items-center mb-4">
          <input type="checkbox" id="hide-unselected" class="mr-2" onclick="toggleUnselectedIssues()">
          <label for="hide-unselected" class="text-sm text-gray-700">Only show selected Issues</label>
        </div>
        <div class="bg-white shadow rounded-lg overflow-hidden">
          <table class="min-w-full divide-y divide-gray-300">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">
                  <div class="flex items-center">
                    <input type="checkbox" 
                          checked
                          class="mr-2"
                          id="master-checkbox"
                          onclick="handleMasterCheckbox(this)">
                    <span>ZenHub Pipeline</span>
                  </div>
                </th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
              <% @workspace["pipelines"].each do |pipeline| %>
                <tr class="hover:bg-gray-50 cursor-pointer" onclick="toggleAccordion('<%= pipeline["id"] %>')">
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center">
                        <input type="checkbox" 
                              checked
                              class="pipeline-checkbox mr-2"
                              data-pipeline-name="<%= pipeline["name"] %>"
                              data-pipeline-id="<%= pipeline["id"] %>"
                              onclick="event.stopPropagation(); handlePipelineCheckbox(this)">
                        <svg id="arrow-<%= pipeline["id"] %>" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 transition-transform duration-200 mr-2">
                          <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                        </svg>
                        <span class="font-medium text-gray-900"><%= pipeline["name"] %></span>
                        <span class="issue-count text-gray-500 ml-2"><%= @pipeline_data[pipeline["id"]][:count] %> issues selected</span>
                        <% 
                          total_points = @pipeline_data[pipeline["id"]][:issues]
                            .select { |issue| @github_issues.none? { |gh_issue| gh_issue[:content][:url] == issue["htmlUrl"] && gh_issue[:fieldValues][:nodes]&.find { |node| node.dig(:field, :name) == "Points" }&.dig(:number) } }
                            .map { |issue| issue.dig("estimate", "value")&.round || 0 }
                            .sum
                        %>
                        <% if total_points > 0 %>
                          <span class="points-count text-gray-500 ml-2">â€¢ <%= total_points %> points</span>
                        <% end %>
                      </div>
                    </div>
                  </td>
                </tr>
                <tr id="content-<%= pipeline["id"] %>" class="hidden">
                  <td colspan="2" class="px-0 border-t border-gray-200">
                    <div class="overflow-x-auto">
                      <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                          <tr>
                            <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 pl-8">Number</th>
                            <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Title</th>
                            <th scope="col" class="px-2 py-3.5 text-left text-sm font-semibold text-gray-900">ZenHub Points</th>
                            <th scope="col" class="px-2 py-3.5 text-left text-sm font-semibold text-gray-900">GitHub Points</th>
                          </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                          <% @pipeline_data[pipeline["id"]][:issues].each do |issue| %>
                            <% github_issue = @github_issues.find { |gh_issue| gh_issue[:content][:url] == issue["htmlUrl"] } %>
                            <% github_status = github_issue&.dig(:fieldValues, :nodes)&.find { |node| node.dig(:field, :name) == "Status" }&.dig(:name) %>
                            <% github_points = github_issue&.dig(:fieldValues, :nodes)&.find { |node| node.dig(:field, :name) == "Points" }&.dig(:number)&.round %>
                            <% zenhub_points = issue.dig("estimate", "value")&.round %>
                            <tr class="issue-row text-gray-700 <%= 'line-through text-gray-200' if github_points %>" 
                                data-github-status="<%= github_status %>"
                                data-sprint-title="<%= issue['sprintTitle'] %>"
                                data-github-points="<%= github_points %>"
                                data-zenhub-points="<%= zenhub_points %>">
                              <td class="whitespace-nowrap py-4 pl-8 pr-3 text-sm">
                                <input type="checkbox" 
                                      <%= 'checked' if !github_points && issue.dig("estimate", "value") %>
                                      class="issue-checkbox mr-2"
                                      data-issue-url="<%= issue["htmlUrl"] %>"
                                      data-issue-number="<%= issue["number"] %>"
                                      data-pipeline-id="<%= pipeline["id"] %>"
                                      onclick="event.stopPropagation()">
                                <a href="<%= issue["htmlUrl"] %>" target="_blank" class="text-blue-600 hover:text-blue-800">
                                  #<%= issue["number"] %>
                                </a>
                              </td>
                              <td class="whitespace-normal px-3 py-4 text-sm">
                                <%= issue["title"] %>
                              </td>
                              <td class="whitespace-nowrap px-2 py-4 text-sm">
                                <%= zenhub_points ? "#{zenhub_points} #{zenhub_points == 1 ? 'point' : 'points'}" : "-" %>
                              </td>
                              <td class="whitespace-nowrap px-2 py-4 text-sm status-cell">
                                <span class="current-status">
                                  <%= github_points ? "#{github_points} #{github_points == 1 ? 'point' : 'points'}" : "-" %>
                                </span>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 text-gray-400 mx-1 hidden new-arrow">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                                </svg>
                                <span class="new-status hidden text-indigo-600">
                                  <span></span>
                                </span>
                              </td>
                            </tr>
                          <% end %>
                        </tbody>
                      </table>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
        <%= erb :_prev_next_buttons, locals: { steps: } %>
      </div>
      <script>
        function handlePipelineCheckbox(checkbox) {
          const pipelineRow = checkbox.closest('tr');
          const contentRow = pipelineRow.nextElementSibling;
          const issueCheckboxes = contentRow.querySelectorAll('.issue-checkbox');
          
          issueCheckboxes.forEach(issueCheckbox => {
            issueCheckbox.checked = checkbox.checked;
            // Update line-through styling for each issue
            const issueRow = issueCheckbox.closest('.issue-row');
            if (checkbox.checked) {
              issueRow.classList.remove('line-through', 'text-gray-400', 'hidden');
              updatePointsDisplay(issueCheckbox);
            } else {
              issueRow.classList.add('line-through', 'text-gray-400');
              updatePointsDisplay(issueCheckbox);
              hideUncheckedIssueWithDelay(issueRow);
            }
          });
          
          checkbox.indeterminate = false;
          updatePipelineCheckboxState(checkbox.dataset.pipelineId);
          updatePipelineIssueCounts();
          generateJson();
          updateIssueCount();
        }

        function updatePipelineCheckboxState(pipelineId) {
          const pipelineCheckbox = document.querySelector(`.pipeline-checkbox[data-pipeline-id="${pipelineId}"]`);
          const contentRow = document.getElementById('content-' + pipelineId);
          const issueCheckboxes = Array.from(contentRow.querySelectorAll('.issue-checkbox'));
          
          const checkedCount = issueCheckboxes.filter(cb => cb.checked).length;
          
          if (checkedCount === 0) {
            pipelineCheckbox.checked = false;
            pipelineCheckbox.indeterminate = false;
          } else if (checkedCount === issueCheckboxes.length) {
            pipelineCheckbox.checked = true;
            pipelineCheckbox.indeterminate = false;
          } else {
            pipelineCheckbox.checked = false;
            pipelineCheckbox.indeterminate = true;
          }
        }

        function generateJson() {
          const mappings = {};
          
          document.querySelectorAll('.pipeline-checkbox').forEach(pipelineCheckbox => {
            const pipelineId = pipelineCheckbox.dataset.pipelineId;
            const contentRow = document.getElementById('content-' + pipelineId);
            
            if (pipelineCheckbox.checked || pipelineCheckbox.indeterminate) {
              const selectedIssues = Array.from(contentRow.querySelectorAll('.issue-checkbox'))
                .filter(checkbox => checkbox.checked)
                .map(checkbox => {
                  const issueRow = checkbox.closest('.issue-row');
                  return {
                    url: checkbox.dataset.issueUrl,
                    number: checkbox.dataset.issueNumber,
                    repoName: checkbox.dataset.issueUrl.split('/')[4],
                    githubPoints: parseInt(issueRow.dataset.githubPoints) || null,
                    zenhubPoints: parseInt(issueRow.dataset.zenhubPoints) || null
                  };
                });
              
              if (selectedIssues.length > 0) {
                mappings[pipelineId] = {
                  issues: selectedIssues,
                  pipelineName: pipelineCheckbox.dataset.pipelineName
                };
              }
            }
          });
          
          sessionStorage.setItem('pointsMappings', JSON.stringify(mappings));
        }

        function updateIssueCount() {
          const checkedIssues = Array.from(document.querySelectorAll('.issue-checkbox'))
            .filter(checkbox => checkbox.checked).length;
          const nextStepInfo = document.querySelector('p.next-step-info');
          if (nextStepInfo) {
            nextStepInfo.textContent = `Selected Issues: ${checkedIssues}`;
          }
        }

        function updatePointsDisplay(checkbox) {
          // If checkbox is a pipeline checkbox, update all issues in that pipeline
          if (checkbox.classList.contains('pipeline-checkbox')) {
            const pipelineId = checkbox.dataset.pipelineId;
            const contentRow = document.getElementById('content-' + pipelineId);
            const issueCheckboxes = contentRow.querySelectorAll('.issue-checkbox');
            issueCheckboxes.forEach(issueCheckbox => {
              updateIssuePointsDisplay(issueCheckbox);
            });
          } else {
            // Otherwise update just this issue
            updateIssuePointsDisplay(checkbox);
          }
        }

        function updateIssuePointsDisplay(checkbox) {
          const issueRow = checkbox.closest('.issue-row');
          if (!issueRow) return;
          const githubPoints = parseInt(issueRow.dataset.githubPoints);
          const zenhubPoints = parseInt(issueRow.dataset.zenhubPoints);
          const currentStatus = issueRow.querySelector('.current-status');
          const newStatus = issueRow.querySelector('.new-status');
          const arrow = issueRow.querySelector('.new-arrow');

          if (checkbox.checked && githubPoints) {
            currentStatus.classList.add('line-through', 'text-gray-400');
            arrow.classList.remove('hidden');
            newStatus.classList.remove('hidden');
            newStatus.querySelector('span').textContent = `${zenhubPoints} ${zenhubPoints === 1 ? 'point' : 'points'}`;
          } else {
            currentStatus.classList.remove('line-through', 'text-gray-400');
            arrow.classList.add('hidden');
            newStatus.classList.add('hidden');
          }
        }

        function handleMasterCheckbox(checkbox) {
          document.querySelectorAll('.pipeline-checkbox').forEach(pipelineCheckbox => {
            pipelineCheckbox.checked = checkbox.checked;
            handlePipelineCheckbox(pipelineCheckbox);
          });
          updatePipelineIssueCounts();
          generateJson();
          updateIssueCount();
        }

        function handleMasterCheckbox(checkbox) {
          document.querySelectorAll('.pipeline-checkbox').forEach(pipelineCheckbox => {
            pipelineCheckbox.checked = checkbox.checked;
            handlePipelineCheckbox(pipelineCheckbox);
          });
          updatePipelineIssueCounts();
          generateJson();
          updateIssueCount();
        }

        // Initialize checkbox event listeners
        document.querySelectorAll('.issue-checkbox').forEach(checkbox => {
          checkbox.addEventListener('change', () => {
            const pipelineId = checkbox.dataset.pipelineId;
            const issueRow = checkbox.closest('.issue-row');
            const pipelineRow = issueRow.closest('table').closest('tr').previousElementSibling;
            const issueCountElement = pipelineRow.querySelector('.issue-count');
            
            // Update display state based on checkbox
            if (checkbox.checked) {
              issueRow.classList.remove('line-through', 'text-gray-400', 'hidden');
              updatePointsDisplay(checkbox);
            } else {
              issueRow.classList.add('line-through', 'text-gray-400');
              updatePointsDisplay(checkbox);
              hideUncheckedIssueWithDelay(issueRow);
            }
            
            // Update the count for this specific pipeline
            const allIssuesInPipeline = issueRow.closest('tbody').querySelectorAll('.issue-checkbox');
            const checkedIssuesInPipeline = Array.from(allIssuesInPipeline).filter(cb => cb.checked).length;
            const totalIssuesInPipeline = allIssuesInPipeline.length;
            issueCountElement.textContent = `${checkedIssuesInPipeline} issues selected`;
            
            updatePipelineCheckboxState(pipelineId);
            generateJson();
            updateIssueCount();
          });
        });


        function updatePipelineIssueCounts() {
          document.querySelectorAll('.issue-count').forEach(issueCountElement => {
            const pipelineRow = issueCountElement.closest('tr');
            const contentRow = pipelineRow.nextElementSibling;
            const allIssues = contentRow.querySelectorAll('.issue-checkbox');
            const checkedIssues = Array.from(allIssues).filter(checkbox => checkbox.checked).length;
            // Calculate total points for checked issues
            const totalPoints = Array.from(allIssues)
              .filter(checkbox => {
                if (!checkbox.checked) return false;
                const issueRow = checkbox.closest('.issue-row');
                const githubPoints = parseInt(issueRow.dataset.githubPoints);
                return isNaN(githubPoints) || githubPoints === 0;
              })
              .map(checkbox => {
                const issueRow = checkbox.closest('.issue-row');
                return parseInt(issueRow.dataset.zenhubPoints) || 0;
              })
              .reduce((sum, points) => sum + points, 0);
            
            // Update both issue count and points
            issueCountElement.textContent = `${checkedIssues} issues selected`;
            const pointsElement = pipelineRow.querySelector('.points-count');
            if (pointsElement) {
              pointsElement.textContent = totalPoints > 0 ? `â€¢ ${totalPoints} points` : '';
            }
          });
        }

        // Initialize points display for all checkboxes
        function initializePointsDisplay() {
          document.querySelectorAll('.issue-checkbox').forEach(checkbox => {
            updatePointsDisplay(checkbox);
          });
        }

        // Initialize the page
        function initializePage() {
          // First uncheck issues without points
          document.querySelectorAll('.issue-row').forEach(issueRow => {
            const zenhubPoints = parseInt(issueRow.dataset.zenhubPoints);
            const checkbox = issueRow.querySelector('.issue-checkbox');
            if (isNaN(zenhubPoints) || zenhubPoints === 0) {
              checkbox.checked = false;
              issueRow.classList.add('line-through', 'text-gray-400');
            }
          });

          // Update initial pipeline counts and states
          document.querySelectorAll('.pipeline-checkbox').forEach(pipelineCheckbox => {
            const pipelineId = pipelineCheckbox.dataset.pipelineId;
            const contentRow = document.getElementById('content-' + pipelineId);
            const allIssues = contentRow.querySelectorAll('.issue-checkbox');
            const checkedIssues = Array.from(allIssues).filter(cb => cb.checked).length;
            const totalIssues = allIssues.length;
            
            // Update count display
            const issueCountElement = pipelineCheckbox.closest('tr').querySelector('.issue-count');
            issueCountElement.textContent = `${checkedIssues} issues selected`;
            
            // Update pipeline checkbox state
            if (checkedIssues === 0) {
              pipelineCheckbox.checked = false;
              pipelineCheckbox.indeterminate = false;
            } else if (checkedIssues === totalIssues) {
              pipelineCheckbox.checked = true;
              pipelineCheckbox.indeterminate = false;
            } else {
              pipelineCheckbox.checked = false;
              pipelineCheckbox.indeterminate = true;
            }
          });

          generateJson();
          updateIssueCount();
        }

        // Call initialization
        initializePage();

        function toggleUnselectedIssues() {
          const hideUnselected = document.getElementById('hide-unselected').checked;
          document.querySelectorAll('.issue-row').forEach(issueRow => {
            const checkbox = issueRow.querySelector('.issue-checkbox');
            if (!checkbox.checked) {
              issueRow.classList.toggle('hidden', hideUnselected);
            }
          });
          updatePipelineIssueCounts();
        }
      </script>
    <% end %>
  </div>
<% end %>
