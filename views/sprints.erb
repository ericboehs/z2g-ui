<%= erb :_progress_nav, locals: { steps: steps } %>
<div class="min-h-full flex flex-col justify-center py-12 sm:px-6 lg:px-8">
  <% if @workspace %>
    <div class="sm:mx-auto sm:w-full sm:max-w-4xl">
      <div class="mb-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold">Migrate Sprints for <%= @workspace["displayName"] %></h2>
          <div class="flex gap-4">
            <a href="/clear-cache" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
              <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Refresh
            </a>
          </div>
        </div>
        <div class="rounded-md bg-blue-50 p-4">
          <div class="flex">
            <div class="shrink-0">
              <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                <path fill-rule="evenodd" d="M18 10a8 8 0 1 1-16 0 8 8 0 0 1 16 0Zm-7-4a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM9 9a.75.75 0 0 0 0 1.5h.253a.25.25 0 0 1 .244.304l-.459 2.066A1.75 1.75 0 0 0 10.747 15H11a.75.75 0 0 0 0-1.5h-.253a.25.25 0 0 1-.244-.304l.459-2.066A1.75 1.75 0 0 0 9.253 9H9Z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3 flex-1 md:flex md:justify-between">
              <p class="text-sm text-blue-700">Selected Issues will replace the <strong>Sprint</strong> value in your GitHub Project.</p>
            </div>
          </div>
        </div>
      </div>
      <div class="flex justify-between items-center mb-4">
        <div class="flex gap-4 text-sm text-gray-600">
          <a href="<%= session[:workspace_url] %>" target="_blank" class="hover:text-gray-900 flex items-center gap-1">
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
            </svg>
            ZenHub Workspace
          </a>
          <a href="<%= session[:github_url] %>" target="_blank" class="hover:text-gray-900 flex items-center gap-1">
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
            </svg>
            GitHub Project
          </a>
        </div>
        <a href="<%= session[:github_url] %>/settings/fields/<%= @github_sprint_field.dig('databaseId') %>" 
          target="_blank" 
          class="text-sm text-gray-600 hover:text-gray-900 flex items-center gap-1">
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
            <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
          </svg>
          Need to add a Sprint?
        </a>
      </div>
      <% if @sprints.any? %>
        <div class="mb-6">
          <div class="flex items-center mb-4">
            <input type="checkbox" id="hide-unselected" class="mr-2" onclick="toggleUnselectedIssues()">
            <label for="hide-unselected" class="text-sm text-gray-700">Only show selected Issues</label>
          </div>
          <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
            <table class="min-w-full divide-y divide-gray-300">
              <thead class="bg-gray-50">
                <tr>
                  <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900">
                    <div class="flex items-center">
                      <input type="checkbox" 
                            checked
                            class="mr-2"
                            id="master-checkbox"
                            onclick="handleMasterCheckbox(this)">
                      <span>ZenHub Sprint</span>
                    </div>
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-center text-sm font-semibold text-gray-900">GitHub Sprint</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 bg-white">
                  <%
                    sorted_sprints = @sprints.sort_by { |sprint| -Date.parse(sprint["startAt"]).to_time.to_i }
                    sorted_sprints.each do |sprint|
                      # Find all issues where this is their latest sprint
                      sprint_issues = @pipeline_data.values.flat_map { |data| 
                        data[:issues].select { |issue| 
                          latest_sprint = issue["sprints"]["nodes"].max_by { |s| Date.parse(s["startAt"]) }
                          latest_sprint&.dig("id") == sprint["id"]
                        }
                      }
                      next if sprint_issues.empty? # Skip sprints with no issues
                  %>
                  <tr class="hover:bg-gray-50 sprint-row">
                    <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm">
                      <div class="flex items-center justify-between">
                        <div class="flex items-center">
                          <input type="checkbox" 
                                checked
                                class="sprint-checkbox mr-2"
                                data-sprint-name="<%= sprint["name"] %>"
                                data-sprint-id="<%= sprint["id"] %>"
                                onclick="handleSprintCheckbox(this)">
                          <div class="cursor-pointer flex items-center" onclick="toggleAccordion('<%= sprint["id"] %>')">
                            <svg id="arrow-<%= sprint["id"] %>" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 transition-transform duration-200 mr-2">
                              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                            </svg>
                            <span class="font-medium text-gray-900"><%= sprint["name"] %></span>
                            <span class="text-gray-500 ml-2 sprint-issue-count">(<%= sprint_issues.length %> issues selected)</span>
                          </div>
                        </div>
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                        </svg>
                      </div>
                    </td>
                    <td class="whitespace-nowrap px-3 py-4 text-sm text-right">
                      <select class="block w-full max-w-xs ml-auto rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" 
                              onclick="event.stopPropagation()"
                              onchange="updateStyles(this)">
                        <option value="">None</option>
                        <% 
                          all_iterations = (@github_sprint_field&.dig('configuration', 'iterations') || []) +
                                        (@github_sprint_field&.dig('configuration', 'completedIterations') || [])
                          all_iterations = all_iterations.sort_by { |i| Date.parse(i['startDate']) }
                          all_iterations.each do |iteration| 
                        %>
                          <% 
                            matching_sprint = @pipeline_data.values.flat_map { |data| 
                              data[:issues].flat_map { |issue| 
                                issue.dig('sprints', 'nodes')
                              }
                            }.find { |zh_sprint| 
                              zh_sprint['name'] == sprint['name'] && 
                              zh_sprint['startAt'] && 
                              (Date.parse(zh_sprint['startAt']) - Date.parse(iteration['startDate'])).abs <= 1
                            }
                          %>
                          <%
                            start_date = Date.parse(iteration['startDate'])
                            end_date = start_date + iteration['duration'].to_i - 1
                            date_range = "#{start_date.strftime('%b %-d')} - #{end_date.strftime('%b %-d, %Y')}"
                          %>
                          <option value="<%= iteration['id'] %>" <%= 'selected' if matching_sprint %> data-sprint-name="<%= iteration['title'] %>">
                            <%= iteration['title'] %> (<%= date_range %>)
                          </option>
                        <% end %>
                      </select>
                    </td>
                  </tr>
                  <tr id="content-<%= sprint["id"] %>" class="hidden">
                    <td colspan="2" class="px-0 border-t border-gray-200">
                      <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-300">
                          <thead class="bg-gray-50">
                            <tr>
                              <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 pl-8">Issue</th>
                              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Title</th>
                              <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">GitHub Sprint</th>
                            </tr>
                          </thead>
                          <tbody class="divide-y divide-gray-200 bg-white pl-8">
                            <% sprint_issues.each do |issue| %>
                              <tr class="issue-row" data-sprint-id="<%= sprint["id"] %>" data-sprint-name="<%= sprint["name"] %>">
                                <td class="whitespace-nowrap py-4 pl-8 pr-3 text-sm">
                                  <input type="checkbox" 
                                        class="issue-checkbox mr-2"
                                        data-issue-url="<%= issue["htmlUrl"] %>"
                                        data-issue-number="<%= issue["number"] %>"
                                        data-sprint-name="<%= sprint["name"] %>">
                                  <a href="<%= issue["htmlUrl"] %>" target="_blank" class="text-blue-600 hover:text-blue-800">
                                    #<%= issue["number"] %>
                                  </a>
                                </td>
                                <td class="whitespace-normal px-3 py-4 text-sm text-gray-700 max-w-xs">
                                  <div class="truncate">
                                    <%= issue["title"] %>
                                  </div>
                                </td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm status-cell min-w-[200px]">
                                  <% github_issue = @github_issues.find { |gh_issue| gh_issue[:content][:url] == issue["htmlUrl"] } %>
                                  <% github_sprint = github_issue&.dig(:fieldValues, :nodes)&.find { |node| node.dig(:field, :name) == "Sprint" }&.dig(:title) %>
                                  <div class="flex items-center">
                                    <span class="current-status">
                                      <% if github_sprint %>
                                        <span class="inline-flex items-center rounded-md bg-gray-100 px-2 py-1 text-xs font-medium text-gray-600 line-through">
                                          <%= github_sprint %>
                                        </span>
                                      <% else %>
                                        <span class="line-through">Not Set</span>
                                      <% end %>
                                    </span>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 text-gray-400 mx-1 hidden new-arrow">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                                    </svg>
                                    <span class="new-status hidden text-indigo-600">
                                      <span class="inline-flex items-center rounded-md bg-gray-100 px-2 py-1 text-xs font-medium"></span>
                                    </span>
                                  </div>
                                </td>
                              </tr>
                            <% end %>
                          </tbody>
                        </table>
                      </div>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
          <%= erb :_prev_next_buttons, locals: { steps: } %>
        </div>
      <% end %>
    </div>
  <% end %>
  <div class="pb-[35vh]"></div>
  <script>
    function updateStyles(selectElement) {
      const row = selectElement.closest('tr');
      const contentRow = document.getElementById('content-' + row.querySelector('.sprint-checkbox').dataset.sprintId);
      const isNoneSelected = selectElement.value === '';
      const sprintCheckbox = row.querySelector('.sprint-checkbox');
      const isChecked = sprintCheckbox ? sprintCheckbox.checked : true;
      const selectedSprintName = selectElement.selectedOptions[0]?.dataset?.sprintName;

      // Check if all issues are unchecked or if "None" is selected
      const allIssuesUnchecked = Array.from(contentRow.querySelectorAll('.issue-checkbox'))
        .every(checkbox => !checkbox.checked);

      // Cross out sprint name if all issues are unchecked OR if "None" is selected
      if (allIssuesUnchecked || isNoneSelected) {
        row.querySelector('span.font-medium').classList.add('line-through', 'text-gray-400');
      } else {
        row.querySelector('span.font-medium').classList.remove('line-through', 'text-gray-400');
      }

      // Update individual issue styles and transitions based on checkbox state AND sprint selection
      contentRow.querySelectorAll('.issue-row').forEach(issueRow => {
        const checkbox = issueRow.querySelector('.issue-checkbox');
        const currentStatus = issueRow.querySelector('.current-status');
        const newStatus = issueRow.querySelector('.new-status');
        const arrow = issueRow.querySelector('.new-arrow');

        if (!checkbox.checked || isNoneSelected) {
          issueRow.classList.add('line-through', 'text-gray-400');
          currentStatus.classList.remove('line-through', 'text-gray-400');
          arrow.classList.add('hidden');
          newStatus.classList.add('hidden');
        } else {
          issueRow.classList.remove('line-through', 'text-gray-400');
          if (selectedSprintName) {
            currentStatus.classList.add('line-through', 'text-gray-400');
            arrow.classList.remove('hidden');
            newStatus.classList.remove('hidden');
            newStatus.querySelector('span').textContent = selectedSprintName;
          }
        }
      });
      
      updateSprintIssueCounts();
    }

    function updateSprintCheckboxState(sprintId) {
      const sprintCheckbox = document.querySelector(`.sprint-checkbox[data-sprint-id="${sprintId}"]`);
      const contentRow = document.getElementById('content-' + sprintId);
      const issueCheckboxes = Array.from(contentRow.querySelectorAll('.issue-checkbox'));
      
      const checkedCount = issueCheckboxes.filter(cb => cb.checked).length;
      
      if (checkedCount === 0) {
        sprintCheckbox.checked = false;
        sprintCheckbox.indeterminate = false;
      } else if (checkedCount === issueCheckboxes.length) {
        sprintCheckbox.checked = true;
        sprintCheckbox.indeterminate = false;
      } else {
        sprintCheckbox.checked = false;
        sprintCheckbox.indeterminate = true;
      }
    }

    function handleSprintCheckbox(checkbox) {
      const row = checkbox.closest('tr');
      const select = row.querySelector('select');
      const contentRow = document.getElementById('content-' + checkbox.dataset.sprintId);
      
      // Update all issue checkboxes under this sprint
      const issueCheckboxes = contentRow.querySelectorAll('.issue-checkbox');
      issueCheckboxes.forEach(issueCheckbox => {
        issueCheckbox.checked = checkbox.checked;
      });
      
      checkbox.indeterminate = false;
      updateStyles(select);
      updateIssueCount();
    }

    function generateJson() {
      // Get existing mappings or initialize empty object
      const sprintMappings = JSON.parse(sessionStorage.getItem('sprintMappings') || '{}');
      const newMappings = {};
      
      document.querySelectorAll('.sprint-row').forEach(sprintRow => {
        const select = sprintRow.querySelector('select');
        const sprintCheckbox = sprintRow.querySelector('.sprint-checkbox');
        const selectedIteration = select.value;
        
        if (selectedIteration && (sprintCheckbox.checked || sprintCheckbox.indeterminate)) {
          // Get the specific sprint's data from its checkbox
          const thisSprintId = sprintCheckbox.dataset.sprintId;
          const thisSprintName = sprintCheckbox.dataset.sprintName;
          
          const contentRow = document.getElementById('content-' + thisSprintId);
          const selectedIssues = Array.from(contentRow.querySelectorAll('.issue-checkbox'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.dataset.issueUrl);
          
          if (selectedIssues.length > 0) {
            const selectedOption = select.options[select.selectedIndex];
            
            // Use the ZenHub sprint ID as the key
            newMappings[thisSprintId] = {
              issues: selectedIssues.map(url => ({
                url: url,
                number: url.split('/').pop(),
                githubIteration: selectedIteration,
                githubIterationName: selectedOption.dataset.sprintName,
                repoName: url.split('/')[4] // Extract repo name from URL
              })),
              pipelineName: thisSprintName
            };
          }
        }
      });

      // Store the updated mappings in sessionStorage
      sessionStorage.setItem('sprintMappings', JSON.stringify(newMappings));
    }

    function updateSprintIssueCounts() {
      document.querySelectorAll('.sprint-row').forEach(sprintRow => {
        const sprintId = sprintRow.querySelector('.sprint-checkbox').dataset.sprintId;
        const contentRow = document.getElementById('content-' + sprintId);
        const visibleIssues = Array.from(contentRow.querySelectorAll('.issue-row'))
          .filter(row => !row.classList.contains('line-through')).length;
        sprintRow.querySelector('.sprint-issue-count').textContent = `(${visibleIssues} issues selected)`;
      });
    }

    function updateIssueCount() {
      const issueCount = Array.from(document.querySelectorAll('.issue-checkbox'))
        .filter(checkbox => {
          const sprintRow = checkbox.closest('tr').parentElement.parentElement.parentElement.parentElement.parentElement.previousElementSibling;
          return checkbox.checked && sprintRow.querySelector('select').value !== '';
        })
        .length;
      document.querySelector('p.next-step-info').textContent = `Selected Issues: ${issueCount}`;
      generateJson();
      updateSprintIssueCounts();
    }

    document.querySelectorAll('.issue-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        const issueRow = checkbox.closest('tr[data-sprint-id]');
        const sprintId = issueRow.dataset.sprintId;
        const sprintRow = document.querySelector(`.sprint-checkbox[data-sprint-id="${sprintId}"]`).closest('tr');
        const select = sprintRow.querySelector('select');
        const selectedOption = select.selectedOptions[0];
        
        // Toggle line-through based on checkbox state
        if (checkbox.checked) {
          issueRow.classList.remove('line-through', 'text-gray-400');
          // Show transition
          const currentStatus = issueRow.querySelector('.current-status');
          const newStatus = issueRow.querySelector('.new-status');
          const arrow = issueRow.querySelector('.new-arrow');
          
          if (select.value) {
            currentStatus.classList.add('line-through', 'text-gray-400');
            arrow.classList.remove('hidden');
            newStatus.classList.remove('hidden');
            newStatus.querySelector('span').textContent = selectedOption.dataset.sprintName;
          }
        } else {
          issueRow.classList.add('line-through', 'text-gray-400');
          // Hide transition
          const currentStatus = issueRow.querySelector('.current-status');
          const newStatus = issueRow.querySelector('.new-status');
          const arrow = issueRow.querySelector('.new-arrow');
          
          currentStatus.classList.remove('line-through', 'text-gray-400');
          arrow.classList.add('hidden');
          newStatus.classList.add('hidden');
        }
        
        updateSprintCheckboxState(sprintId);
        updateIssueCount();
        updateStyles(select);
      });
    });

    document.querySelectorAll('select').forEach(select => {
      select.addEventListener('change', () => {
        updateIssueCount();
        updateStyles(select);
      });
    });

    updateIssueCount();

    // Initialize styles, checkboxes states and JSON on page load
    function initializePage() {
      // First update all sprint selections and styles
      document.querySelectorAll('select').forEach(select => {
        const sprintRow = select.closest('tr');
        const sprintId = sprintRow.querySelector('.sprint-checkbox').dataset.sprintId;
        const contentRow = document.getElementById('content-' + sprintId);
        const selectedSprintName = select.selectedOptions[0]?.dataset?.sprintName;
        
        // For each issue under this sprint
        contentRow.querySelectorAll('.issue-checkbox').forEach(checkbox => {
          const issueRow = checkbox.closest('.issue-row');
          const currentStatus = issueRow.querySelector('.current-status span');
          const currentSprintName = currentStatus?.textContent?.trim() || 'Not Set';
          
          // Check the box if the sprint would change
          if (select.value && currentSprintName !== selectedSprintName) {
            checkbox.checked = true;
            const newStatus = issueRow.querySelector('.new-status');
            const arrow = issueRow.querySelector('.new-arrow');
            
            currentStatus.closest('.current-status').classList.add('line-through', 'text-gray-400');
            arrow.classList.remove('hidden');
            newStatus.classList.remove('hidden');
            newStatus.querySelector('span').textContent = selectedSprintName;
          }
        });
        
        updateStyles(select);
      });

      // Then update all checkbox states and counts
      document.querySelectorAll('.sprint-checkbox').forEach(checkbox => {
        updateSprintCheckboxState(checkbox.dataset.sprintId);
      });
      
      generateJson();
      updateIssueCount();
    }

    function handleMasterCheckbox(checkbox) {
      document.querySelectorAll('.pipeline-checkbox').forEach(pipelineCheckbox => {
        pipelineCheckbox.checked = checkbox.checked;
        handlePipelineCheckbox(pipelineCheckbox);
      });
      updatePipelineIssueCounts();
      generateJson();
      updateIssueCount();
    }

    function handleMasterCheckbox(checkbox) {
      document.querySelectorAll('.sprint-checkbox').forEach(sprintCheckbox => {
        sprintCheckbox.checked = checkbox.checked;
        handleSprintCheckbox(sprintCheckbox);
      });
      updateSprintIssueCounts();
      generateJson();
      updateIssueCount();
    }

    // Call initialization
    initializePage();
  </script>
</div>
