<!DOCTYPE html>
<html>
<head>
  <title>ZenHub Pipeline Viewer</title>
  <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
  <script>
    window.addEventListener('load', function() {
      document.querySelector('form').addEventListener('submit', function() {
        var submitButton = this.querySelector('button[data-disable-with]');
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.dataset.originalText = submitButton.innerText;
          submitButton.innerText = submitButton.dataset.disableWith;
          submitButton.classList.add('opacity-50', 'cursor-not-allowed');
        }
      });
    });

    let selectedIssues = {
      metadata: {
        zenhubWorkspaceId: "<%= @workspace&.dig('id') %>",
        githubProject: {
          organization: "<%= params[:github_url] ? extract_github_project_info(params[:github_url])[:organization] : '' %>",
          projectNumber: "<%= params[:github_url] ? extract_github_project_info(params[:github_url])[:project_number] : '' %>"
        }
      }
    };

    function handleSprintCheckbox(checkbox) {
      const sprintName = checkbox.dataset.sprintName;
      const issues = document.querySelectorAll(`.issue-row[data-sprint-name="${sprintName}"] .issue-checkbox`);
      const sprintRow = checkbox.closest('tr');
      const githubSprintSelect = sprintRow.querySelector('select');
      const githubSprintOption = githubSprintSelect.options[githubSprintSelect.selectedIndex];
      
      issues.forEach(issueCheckbox => {
        issueCheckbox.checked = checkbox.checked;
        const issueRow = issueCheckbox.closest('tr');
        const issueLink = issueRow.querySelector('a[href]');
        const issueUrl = issueLink.href;
        
        if (checkbox.checked && githubSprintOption.value !== "") {
          selectedIssues[issueUrl] = {
            fromZenHubSprint: sprintName,
            toGitHubSprint: {
              id: githubSprintOption.value,
              name: githubSprintOption.text
            }
          };
        } else {
          delete selectedIssues[issueUrl];
        }
      });
      
      updateJsonDisplay();
    }

    function handleSprintSelect(select) {
      const sprintRow = select.closest('tr');
      const sprintName = sprintRow.querySelector('.sprint-checkbox')?.dataset.sprintName;
      const selectedOption = select.options[select.selectedIndex];
      
      // Find all checked issue checkboxes for this sprint
      const checkedIssues = document.querySelectorAll(
        `.issue-row[data-sprint-name="${sprintName}"] .issue-checkbox:checked`
      );
      
      checkedIssues.forEach(checkbox => {
        const issueRow = checkbox.closest('tr');
        const issueLink = issueRow.querySelector('a[href]');
        const issueUrl = issueLink.href;
        
        if (selectedOption.value !== "") {
          selectedIssues[issueUrl] = {
            fromZenHubSprint: sprintName,
            toGitHubSprint: {
              id: selectedOption.value,
              name: selectedOption.text
            }
          };
        } else {
          delete selectedIssues[issueUrl];
        }
      });
      
      updateJsonDisplay();
    }

    function handleIssueCheckbox(checkbox) {
      const sprintName = checkbox.dataset.sprintName;
      const issueRow = checkbox.closest('tr');
      const issueLink = issueRow.querySelector('a[href]');
      const issueUrl = issueLink.href;
      
      // Find the sprint row by name and get its select element
      const sprintRow = document.querySelector(`tr.sprint-row .sprint-checkbox[data-sprint-name="${sprintName}"]`)?.closest('tr');
      const sprintSelect = sprintRow?.querySelector('select');
      
      if (checkbox.checked) {
        if (sprintSelect) {
          const selectedOption = sprintSelect.options[sprintSelect.selectedIndex];
          if (selectedOption?.value) {
            selectedIssues[issueUrl] = {
              fromZenHubSprint: sprintName,
              toGitHubSprint: {
                id: selectedOption.value,
                name: selectedOption.text
              }
            };
          }
        }
      } else {
        delete selectedIssues[issueUrl];
      }
      
      // Update the sprint checkbox based on all issue checkboxes
      const sprintCheckbox = document.querySelector(`.sprint-checkbox[data-sprint-name="${sprintName}"]`);
      const allIssues = document.querySelectorAll(`.issue-row[data-sprint-name="${sprintName}"] .issue-checkbox`);
      const checkedIssues = Array.from(allIssues).filter(issueCheckbox => issueCheckbox.checked);
      
      if (checkedIssues.length === allIssues.length) {
        sprintCheckbox.checked = true;
        sprintCheckbox.indeterminate = false;
      } else if (checkedIssues.length > 0) {
        sprintCheckbox.checked = false;
        sprintCheckbox.indeterminate = true;
      } else {
        sprintCheckbox.checked = false;
        sprintCheckbox.indeterminate = false;
      }
      
      updateJsonDisplay();
    }

    let selectedPipelines = {
      metadata: {
        zenhubWorkspaceId: "<%= @workspace&.dig('id') %>",
        githubProject: {
          organization: "<%= params[:github_url] ? extract_github_project_info(params[:github_url])[:organization] : '' %>",
          projectNumber: "<%= params[:github_url] ? extract_github_project_info(params[:github_url])[:project_number] : '' %>"
        }
      },
      mappings: {}
    };

    function handlePipelineStatusSelect(select) {
      const pipelineId = select.dataset.pipelineId;
      const pipelineName = select.dataset.pipelineName;
      const selectedOption = select.options[select.selectedIndex];
      
      if (selectedOption.value !== "") {
        selectedPipelines.mappings[pipelineId] = {
          fromPipeline: {
            id: pipelineId,
            name: pipelineName
          },
          toStatus: {
            id: selectedOption.value,
            name: selectedOption.text
          }
        };
      } else {
        delete selectedPipelines.mappings[pipelineId];
      }
      
      updatePipelineMappingsJson();
    }

    function updatePipelineMappingsJson() {
      const jsonDisplay = document.getElementById('pipeline-mappings-json');
      if (Object.keys(selectedPipelines.mappings).length > 0) {
        const prettyJson = JSON.stringify(selectedPipelines, null, 2);
        jsonDisplay.querySelector('pre').textContent = prettyJson;
        jsonDisplay.classList.remove('hidden');
      } else {
        jsonDisplay.classList.add('hidden');
      }
    }

    function updateJsonDisplay() {
      const jsonDisplay = document.getElementById('selected-issues-json');
      if (Object.keys(selectedIssues).length > 1) { // Exclude metadata from count
        const prettyJson = JSON.stringify(selectedIssues, null, 2);
        jsonDisplay.innerHTML = `<pre class="text-xs font-mono">${prettyJson}</pre>`;
        jsonDisplay.classList.remove('hidden');
      } else {
        jsonDisplay.innerHTML = '';
        jsonDisplay.classList.add('hidden');
      }
    }
    function toggleAccordion(id) {
      const content = document.getElementById(`content-${id}`);
      const arrow = document.getElementById(`arrow-${id}`);
      
      if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        arrow.classList.add('rotate-90');
      } else {
        content.classList.add('hidden');
        arrow.classList.remove('rotate-90');
      }
    }
  </script>
</head>
<body class="bg-gray-100">
  <%= yield %>
</body>
</html>
